---
title: "BEE 4750/5750 Homework 3"
author: "Your name here (your netID here)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: true
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
Pkg.add("Measures")
```

<!--- this block is hidden, but stores the generator and demand data; you can use a dataframe to combine these or refactor as you'd like -->
```julia; echo = false; results = "hidden"
# generator data
investment_cost = [457000, 268000, 85000, 62580, 92000, 92000]
op_cost = [0, 22, 35, 45, 0, 0]
co2_emissions = [0, 1, 0.43, 0.55, 0, 0]
thermal_cf = [0.95, 1, 1, 1]

hours = 1:24
demand = [1517, 1486, 1544, 1733, 2058, 2470, 2628, 2696, 2653, 2591, 2626, 2714, 2803, 2842, 2891,  2821, 3017, 3074, 2957,  2487, 2249, 1933, 1684, 1563]
wind_cf = [0.58, 0.57, 0.55, 0.28, 0.14, 0.21, 0.03, 0.04, 0.01, 0.04, 0.04, 0.01, 0.04, 0.04, 0.01, 0.01, 0.01, 0.13, 0.30, 0.45, 0.44, 0.57, 0.55, 0.58]
solar_cf = [0, 0, 0, 0, 0, 0, 0.20, 0.57, 0.80, 0.93, 0.99, 0.99, 0.85, 0.99, 0.95, 0.81, 0.55, 0.12, 0, 0, 0, 0, 0, 0]
```

# Problem 1
```julia
using JuMP
using HiGHS
using DataFrames
using Plots
gr()
using Measures

dispatch = Model(HiGHS.Optimizer)
```
## Problem 1.1
The decision variables are generator capacity, production of energy, and the non-served energy amount
```julia
generators = ["geothermal", "coal", "CCGT", "CT", "wind", "solar"]

G = 1:length(generators)
T = 1:length(hours)

@variable(dispatch, x[G] >= 0) #capacity as a function of type of generator G
@variable(dispatch, y[G,T] >= 0) #production as a function of type of generator G and time T 
@variable(dispatch, nse[T] >= 0) #non-served energy as a function of time
```

## Problem 1.2
```julia
#To minimize the cost, we first define the objective as the sum of all costs, which are the investment cost, the operation costs, and the non-served energy cost.
@objective(dispatch, Min, sum(investment_cost.*x) + sum(0*y[1,:] .+ 22*y[2,:] .+ 35*y[3,:] .+ 45*y[4,:] .+ 0*y[5,:] .+ 0*y[6,:])*365 + 1000*sum(nse)*365)
```
## Problem 1.3
The constraints in this problem are demands of power generation, capacity and availbility of generators, and 


```julia
#availability factors
avail = zeros(length(G), length(T));
avail[1, :] .= thermal_cf[1];
avail[2, :] .= thermal_cf[2];
avail[3, :] .= thermal_cf[3];
avail[4, :] .= thermal_cf[4];
avail[5, :]  = wind_cf;
avail[6, :]  = solar_cf;
@constraint(dispatch, availability[g in G, t in T], y[g, t] <= avail[g,t]*x[g]) #capacity availbility cannot exceed the given generator capacity 
@constraint(dispatch, load[t in T], sum(y[:, t])+ sum(nse[t]) == demand[t]) #sum of production and non-served energy must equal to the demand


```
## Problem 1.4
```julia
set_silent(dispatch)
optimize!(dispatch)
objective_value(dispatch)
```

## Problem 1.5
```julia
generation = [sum(value.(y).data[g,:].*hours) for g in G]
results = DataFrame("Name" => generators, "Dispatched Power (MW)" => generation)
```
## Problem 1.6
```julia
generation = value.(y).data
plot(generation', 
label = permutedims(generators), xlabel = "Time", ylabel = "Generated Electricity (MW)", 
color_palette = :tol_muted, thickness_scaling = 2, linewidth = 2, size = (1000,1000), left_margin=5mm, bottom_margin=5mm, legend = :topright, legendfontsize=8, tick_size=13, guidefontsize=14)
areaplot(generation', label = permutedims(generators), xlabel = "Time", ylabel = "Generated Electricity (MW)", color_palette = :tol_muted, thickness_scaling = 1.45, grid = false, legend = :topleft)
plot!(demand, color=:red, label = "demand", linestyle = :dash, linewidth = 3)
```
Takeaways: 
The energy production from solar generators are the highest during middle of the day

# Problem 2
## Problem 2.1
We now need to consider the CO2 emission, which the NY State legislative sets the constraint to be 1.5 Mt/year.

```julia
@constraint(dispatch, CO2, sum(co2_emissions.*y) <= (1.5*(10^6)/365)) #CO2 emission of all generators must not exceed limit of 1.5 Mt/year

```
## Problem 2.2
```julia
optimize!(dispatch)
objective_value(dispatch)
```
## Problem 2.3
```julia
generation = [sum(value.(y).data[g,:].*hours) for g in G]
results = DataFrame("Name" => generators, "Dispatched Power (MW)" => generation)
```
## Problem 2.4
```julia
generation = value.(y).data
plot!(generation', 
label = permutedims(generators), xlabel = "Hour", ylabel = "Generated Electricity (MW)", 
color_palette = :tol_muted, thickness_scaling = 2, linewidth = 2, size = (1000,1000), left_margin=5mm, bottom_margin=5mm, legend = :topright, legendfontsize =8, tick_size=13, guidefontsize=14)
areaplot!(generation', label = permutedims(generators), xlabel = "Time", ylabel = "Generated Electricity (MW)", color_palette = :tol_muted, thickness_scaling = 1.45, grid = false, legend = :topleft)
plot!(demand, color=:red, label = "demand", linestyle = :dash, linewidth = 3)
```

## Problem 2.5
```julia

```

# References

